(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[34],{

/***/ "./node_modules/bnc-onboard/dist/esm/ledger-71657cc6.js":
/*!**************************************************************!*\
  !*** ./node_modules/bnc-onboard/dist/esm/ledger-71657cc6.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar ledgerIcon = \"\\n\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 450 450\\\" width=\\\"37\\\" height=\\\"37\\\"><style>.st0{fill:currentColor}</style><g id=\\\"squares_1_\\\"><path class=\\\"st0\\\" d=\\\"M578.2 392.7V24.3h25.6v344.1h175.3v24.3H578.2zm327.5 5.1c-39.7 0-70.4-12.8-93.4-37.1-21.7-24.3-33.3-58.8-33.3-103.6 0-43.5 10.2-79.3 32-104.9 21.7-26.9 49.9-39.7 87-39.7 32 0 57.6 11.5 76.8 33.3 19.2 23 28.1 53.7 28.1 92.1v20.5H804.6c0 37.1 9 66.5 26.9 85.7 16.6 20.5 42.2 29.4 74.2 29.4 15.3 0 29.4-1.3 40.9-3.8 11.5-2.6 26.9-6.4 44.8-14.1v24.3c-15.3 6.4-29.4 11.5-42.2 14.1-14.3 2.6-28.9 3.9-43.5 3.8zM898 135.6c-26.9 0-47.3 9-64 25.6-15.3 17.9-25.6 42.2-28.1 75.5h168.9c0-32-6.4-56.3-20.5-74.2-12.8-18-32-26.9-56.3-26.9zm238-21.8c19.2 0 37.1 3.8 51.2 10.2 14.1 7.7 26.9 19.2 38.4 37.1h1.3c-1.3-21.7-1.3-42.2-1.3-62.7V0h24.3v392.7h-16.6l-6.4-42.2c-20.5 30.7-51.2 47.3-89.6 47.3s-66.5-11.5-87-35.8c-20.5-23-29.4-57.6-29.4-102.3 0-47.3 10.2-83.2 29.4-108.7 19.2-25.6 48.6-37.2 85.7-37.2zm0 21.8c-29.4 0-52.4 10.2-67.8 32-15.3 20.5-23 51.2-23 92.1 0 78 30.7 116.4 90.8 116.4 30.7 0 53.7-9 67.8-26.9 14.1-17.9 21.7-47.3 21.7-89.6v-3.8c0-42.2-7.7-72.9-21.7-90.8-12.8-20.5-35.8-29.4-67.8-29.4zm379.9-16.6v17.9l-56.3 3.8c15.3 19.2 23 39.7 23 61.4 0 26.9-9 47.3-26.9 64-17.9 16.6-40.9 24.3-70.4 24.3-12.8 0-21.7 0-25.6-1.3-10.2 5.1-17.9 11.5-23 17.9-5.1 7.7-7.7 14.1-7.7 23s3.8 15.3 10.2 19.2c6.4 3.8 17.9 6.4 33.3 6.4h47.3c29.4 0 52.4 6.4 67.8 17.9s24.3 29.4 24.3 53.7c0 29.4-11.5 51.2-34.5 66.5-23 15.3-56.3 23-99.8 23-34.5 0-61.4-6.4-80.6-20.5-19.2-12.8-28.1-32-28.1-55 0-19.2 6.4-34.5 17.9-47.3s28.1-20.5 47.3-25.6c-7.7-3.8-15.3-9-19.2-15.3-5-6.2-7.7-13.8-7.7-21.7 0-17.9 11.5-34.5 34.5-48.6-15.3-6.4-28.1-16.6-37.1-30.7-9-14.1-12.8-30.7-12.8-48.6 0-26.9 9-49.9 25.6-66.5 17.9-16.6 40.9-24.3 70.4-24.3 17.9 0 32 1.3 42.2 5.1h85.7v1.3h.2zm-222.6 319.8c0 37.1 28.1 56.3 84.4 56.3 71.6 0 107.5-23 107.5-69.1 0-16.6-5.1-28.1-16.6-35.8-11.5-7.7-29.4-11.5-55-11.5h-44.8c-49.9 1.2-75.5 20.4-75.5 60.1zm21.8-235.4c0 21.7 6.4 37.1 19.2 49.9 12.8 11.5 29.4 17.9 51.2 17.9 23 0 40.9-6.4 52.4-17.9 12.8-11.5 17.9-28.1 17.9-49.9 0-23-6.4-40.9-19.2-52.4-12.8-11.5-29.4-17.9-52.4-17.9-21.7 0-39.7 6.4-51.2 19.2-12.8 11.4-17.9 29.3-17.9 51.1z\\\"/><path class=\\\"st0\\\" d=\\\"M1640 397.8c-39.7 0-70.4-12.8-93.4-37.1-21.7-24.3-33.3-58.8-33.3-103.6 0-43.5 10.2-79.3 32-104.9 21.7-26.9 49.9-39.7 87-39.7 32 0 57.6 11.5 76.8 33.3 19.2 23 28.1 53.7 28.1 92.1v20.5h-197c0 37.1 9 66.5 26.9 85.7 16.6 20.5 42.2 29.4 74.2 29.4 15.3 0 29.4-1.3 40.9-3.8 11.5-2.6 26.9-6.4 44.8-14.1v24.3c-15.3 6.4-29.4 11.5-42.2 14.1-14.1 2.6-28.2 3.8-44.8 3.8zm-6.4-262.2c-26.9 0-47.3 9-64 25.6-15.3 17.9-25.6 42.2-28.1 75.5h168.9c0-32-6.4-56.3-20.5-74.2-12.8-18-32-26.9-56.3-26.9zm245.6-21.8c11.5 0 24.3 1.3 37.1 3.8l-5.1 24.3c-11.8-2.6-23.8-3.9-35.8-3.8-23 0-42.2 10.2-57.6 29.4-15.3 20.5-23 44.8-23 75.5v149.7h-25.6V119h21.7l2.6 49.9h1.3c11.5-20.5 23-34.5 35.8-42.2 15.4-9 30.7-12.9 48.6-12.9zM333.9 12.8h-183v245.6h245.6V76.7c.1-34.5-28.1-63.9-62.6-63.9zm-239.2 0H64c-34.5 0-64 28.1-64 64v30.7h94.7V12.8zM0 165h94.7v94.7H0V165zm301.9 245.6h30.7c34.5 0 64-28.1 64-64V316h-94.7v94.6zm-151-94.6h94.7v94.7h-94.7V316zM0 316v30.7c0 34.5 28.1 64 64 64h30.7V316H0z\\\"/></g></svg>\\n\";\nvar LEDGER_LIVE_PATH = \"m/44'/60'\";\nvar ACCOUNTS_TO_GET = 5;\n\nfunction ledger(options) {\n  var rpcUrl = options.rpcUrl,\n      LedgerTransport = options.LedgerTransport,\n      networkId = options.networkId,\n      preferred = options.preferred,\n      label = options.label,\n      iconSrc = options.iconSrc,\n      svg = options.svg;\n  return {\n    name: label || 'Ledger',\n    svg: svg || ledgerIcon,\n    iconSrc: iconSrc,\n    wallet: function () {\n      var _wallet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(helpers) {\n        var BigNumber, networkName, resetWalletState, provider;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                BigNumber = helpers.BigNumber, networkName = helpers.networkName, resetWalletState = helpers.resetWalletState;\n                _context4.next = 3;\n                return ledgerProvider({\n                  rpcUrl: rpcUrl,\n                  networkId: networkId,\n                  LedgerTransport: LedgerTransport,\n                  BigNumber: BigNumber,\n                  networkName: networkName,\n                  resetWalletState: resetWalletState\n                });\n\n              case 3:\n                provider = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  provider: provider,\n                  \"interface\": {\n                    name: 'Ledger',\n                    connect: provider.enable,\n                    disconnect: provider.disconnect,\n                    address: {\n                      get: function () {\n                        var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                          return regeneratorRuntime.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  return _context.abrupt(\"return\", provider.getPrimaryAddress());\n\n                                case 1:\n                                case \"end\":\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee);\n                        }));\n\n                        function get() {\n                          return _get.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    },\n                    network: {\n                      get: function () {\n                        var _get2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  return _context2.abrupt(\"return\", networkId);\n\n                                case 1:\n                                case \"end\":\n                                  return _context2.stop();\n                              }\n                            }\n                          }, _callee2);\n                        }));\n\n                        function get() {\n                          return _get2.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    },\n                    balance: {\n                      get: function () {\n                        var _get3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n                          var address;\n                          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                            while (1) {\n                              switch (_context3.prev = _context3.next) {\n                                case 0:\n                                  address = provider.getPrimaryAddress();\n                                  return _context3.abrupt(\"return\", address && provider.getBalance(address));\n\n                                case 2:\n                                case \"end\":\n                                  return _context3.stop();\n                              }\n                            }\n                          }, _callee3);\n                        }));\n\n                        function get() {\n                          return _get3.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    }\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function wallet(_x) {\n        return _wallet.apply(this, arguments);\n      }\n\n      return wallet;\n    }(),\n    type: 'hardware',\n    desktop: true,\n    mobile: true,\n    osExclusions: ['iOS'],\n    preferred: preferred\n  };\n}\n\nfunction ledgerProvider(_x2) {\n  return _ledgerProvider.apply(this, arguments);\n}\n\nfunction _ledgerProvider() {\n  _ledgerProvider = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(options) {\n    var _yield$import, createProvider, _yield$import2, generateAddresses, isValidPath, _yield$import3, TransportU2F, _yield$import4, Eth, EthereumTx, ethUtil, buffer, networkId, rpcUrl, LedgerTransport, BigNumber, networkName, resetWalletState, dPath, addressToPath, enabled, customPath, account, provider, transport, eth, disconnect, setPath, _setPath, isCustomPath, createTransport, _createTransport, enable, addresses, setPrimaryAccount, getAddress, _getAddress, getPublicKey, _getPublicKey, getPrimaryAddress, getMoreAccounts, _getMoreAccounts, _getAccounts, _getAccounts2, getBalances, getBalance, _signTransaction, _signTransaction2, _signMessage, _signMessage2;\n\n    return regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _signMessage2 = function _signMessage4() {\n              _signMessage2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(message) {\n                var path;\n                return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                  while (1) {\n                    switch (_context13.prev = _context13.next) {\n                      case 0:\n                        if (!(addressToPath.size === 0)) {\n                          _context13.next = 3;\n                          break;\n                        }\n\n                        _context13.next = 3;\n                        return enable();\n\n                      case 3:\n                        path = _toConsumableArray(addressToPath.values())[0];\n                        return _context13.abrupt(\"return\", eth.signPersonalMessage(path, ethUtil.stripHexPrefix(message.data)).then(function (result) {\n                          var v = (result['v'] - 27).toString(16);\n\n                          if (v.length < 2) {\n                            v = '0' + v;\n                          }\n\n                          return \"0x\".concat(result['r']).concat(result['s']).concat(v);\n                        }));\n\n                      case 5:\n                      case \"end\":\n                        return _context13.stop();\n                    }\n                  }\n                }, _callee13);\n              }));\n              return _signMessage2.apply(this, arguments);\n            };\n\n            _signMessage = function _signMessage3(_x9) {\n              return _signMessage2.apply(this, arguments);\n            };\n\n            _signTransaction2 = function _signTransaction4() {\n              _signTransaction2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(transactionData) {\n                var path, transaction, ledgerResult;\n                return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        path = _toConsumableArray(addressToPath.values())[0];\n                        _context12.prev = 1;\n                        transaction = new EthereumTx.Transaction(transactionData, {\n                          chain: networkName(networkId)\n                        });\n                        transaction.raw[6] = buffer.Buffer.from([networkId]); // v\n\n                        transaction.raw[7] = buffer.Buffer.from([]); // r\n\n                        transaction.raw[8] = buffer.Buffer.from([]); // s\n\n                        _context12.next = 8;\n                        return eth.signTransaction(path, transaction.serialize().toString('hex'));\n\n                      case 8:\n                        ledgerResult = _context12.sent;\n                        transaction.v = buffer.Buffer.from(ledgerResult.v, 'hex');\n                        transaction.r = buffer.Buffer.from(ledgerResult.r, 'hex');\n                        transaction.s = buffer.Buffer.from(ledgerResult.s, 'hex');\n                        return _context12.abrupt(\"return\", \"0x\".concat(transaction.serialize().toString('hex')));\n\n                      case 15:\n                        _context12.prev = 15;\n                        _context12.t0 = _context12[\"catch\"](1);\n                        throw _context12.t0;\n\n                      case 18:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _callee12, null, [[1, 15]]);\n              }));\n              return _signTransaction2.apply(this, arguments);\n            };\n\n            _signTransaction = function _signTransaction3(_x8) {\n              return _signTransaction2.apply(this, arguments);\n            };\n\n            getBalance = function _getBalance(address) {\n              return new Promise(function (resolve, reject) {\n                provider.sendAsync({\n                  jsonrpc: '2.0',\n                  method: 'eth_getBalance',\n                  params: [address, 'latest'],\n                  id: 42\n                }, function (e, res) {\n                  e && reject(e);\n                  var result = res && res.result;\n\n                  if (result != null) {\n                    resolve(new BigNumber(result).toString(10));\n                  } else {\n                    resolve(null);\n                  }\n                });\n              });\n            };\n\n            getBalances = function _getBalances(addresses) {\n              return Promise.all(addresses.map(function (address) {\n                return new Promise( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(resolve) {\n                    var balance;\n                    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return getBalance(address);\n\n                          case 2:\n                            balance = _context5.sent;\n                            resolve({\n                              address: address,\n                              balance: balance\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x7) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n              }));\n            };\n\n            _getAccounts2 = function _getAccounts4() {\n              _getAccounts2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(getMore) {\n                var currentAccounts, paths, i, _i2, _paths, path, res, addressInfo;\n\n                return regeneratorRuntime.wrap(function _callee11$(_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        if (enabled) {\n                          _context11.next = 2;\n                          break;\n                        }\n\n                        return _context11.abrupt(\"return\", []);\n\n                      case 2:\n                        if (!(addressToPath.size > 0 && !getMore)) {\n                          _context11.next = 4;\n                          break;\n                        }\n\n                        return _context11.abrupt(\"return\", addresses());\n\n                      case 4:\n                        if (eth) {\n                          _context11.next = 7;\n                          break;\n                        }\n\n                        _context11.next = 7;\n                        return createTransport();\n\n                      case 7:\n                        if (dPath === '') {\n                          dPath = LEDGER_LIVE_PATH;\n                        }\n\n                        if (!(dPath === LEDGER_LIVE_PATH)) {\n                          _context11.next = 24;\n                          break;\n                        }\n\n                        currentAccounts = addressToPath.size;\n                        paths = [];\n\n                        for (i = currentAccounts; i < ACCOUNTS_TO_GET + currentAccounts; i++) {\n                          paths.push(\"\".concat(LEDGER_LIVE_PATH, \"/\").concat(i, \"'/0/0\"));\n                        }\n\n                        _i2 = 0, _paths = paths;\n\n                      case 13:\n                        if (!(_i2 < _paths.length)) {\n                          _context11.next = 22;\n                          break;\n                        }\n\n                        path = _paths[_i2];\n                        _context11.next = 17;\n                        return eth.getAddress(path);\n\n                      case 17:\n                        res = _context11.sent;\n                        addressToPath.set(res.address, path);\n\n                      case 19:\n                        _i2++;\n                        _context11.next = 13;\n                        break;\n\n                      case 22:\n                        _context11.next = 36;\n                        break;\n\n                      case 24:\n                        if (account) {\n                          _context11.next = 34;\n                          break;\n                        }\n\n                        _context11.prev = 25;\n                        _context11.next = 28;\n                        return getPublicKey();\n\n                      case 28:\n                        account = _context11.sent;\n                        _context11.next = 34;\n                        break;\n\n                      case 31:\n                        _context11.prev = 31;\n                        _context11.t0 = _context11[\"catch\"](25);\n                        throw _context11.t0;\n\n                      case 34:\n                        addressInfo = generateAddresses(account, addressToPath.size);\n                        addressInfo.forEach(function (_ref4) {\n                          var dPath = _ref4.dPath,\n                              address = _ref4.address;\n                          addressToPath.set(address, dPath);\n                        });\n\n                      case 36:\n                        return _context11.abrupt(\"return\", addresses());\n\n                      case 37:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee11, null, [[25, 31]]);\n              }));\n              return _getAccounts2.apply(this, arguments);\n            };\n\n            _getAccounts = function _getAccounts3(_x6) {\n              return _getAccounts2.apply(this, arguments);\n            };\n\n            _getMoreAccounts = function _getMoreAccounts3() {\n              _getMoreAccounts = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n                var accounts;\n                return regeneratorRuntime.wrap(function _callee10$(_context10) {\n                  while (1) {\n                    switch (_context10.prev = _context10.next) {\n                      case 0:\n                        _context10.next = 2;\n                        return _getAccounts(true);\n\n                      case 2:\n                        accounts = _context10.sent;\n                        return _context10.abrupt(\"return\", accounts && getBalances(accounts));\n\n                      case 4:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }\n                }, _callee10);\n              }));\n              return _getMoreAccounts.apply(this, arguments);\n            };\n\n            getMoreAccounts = function _getMoreAccounts2() {\n              return _getMoreAccounts.apply(this, arguments);\n            };\n\n            getPrimaryAddress = function _getPrimaryAddress() {\n              return enabled ? addresses()[0] : undefined;\n            };\n\n            _getPublicKey = function _getPublicKey3() {\n              _getPublicKey = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n                var result, publicKey, chainCode;\n                return regeneratorRuntime.wrap(function _callee9$(_context9) {\n                  while (1) {\n                    switch (_context9.prev = _context9.next) {\n                      case 0:\n                        if (dPath) {\n                          _context9.next = 2;\n                          break;\n                        }\n\n                        throw new Error('a derivation path is needed to get the public key');\n\n                      case 2:\n                        if (eth) {\n                          _context9.next = 5;\n                          break;\n                        }\n\n                        _context9.next = 5;\n                        return createTransport();\n\n                      case 5:\n                        _context9.prev = 5;\n                        _context9.next = 8;\n                        return eth.getAddress(dPath, false, true);\n\n                      case 8:\n                        result = _context9.sent;\n                        publicKey = result.publicKey, chainCode = result.chainCode;\n                        account = {\n                          publicKey: publicKey,\n                          chainCode: chainCode,\n                          path: dPath\n                        };\n                        return _context9.abrupt(\"return\", account);\n\n                      case 14:\n                        _context9.prev = 14;\n                        _context9.t0 = _context9[\"catch\"](5);\n                        throw new Error('There was a problem accessing your Ledger accounts.');\n\n                      case 17:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }\n                }, _callee9, null, [[5, 14]]);\n              }));\n              return _getPublicKey.apply(this, arguments);\n            };\n\n            getPublicKey = function _getPublicKey2() {\n              return _getPublicKey.apply(this, arguments);\n            };\n\n            _getAddress = function _getAddress3() {\n              _getAddress = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(path) {\n                var result;\n                return regeneratorRuntime.wrap(function _callee8$(_context8) {\n                  while (1) {\n                    switch (_context8.prev = _context8.next) {\n                      case 0:\n                        if (eth) {\n                          _context8.next = 3;\n                          break;\n                        }\n\n                        _context8.next = 3;\n                        return createTransport();\n\n                      case 3:\n                        _context8.prev = 3;\n                        _context8.next = 6;\n                        return eth.getAddress(path);\n\n                      case 6:\n                        result = _context8.sent;\n                        return _context8.abrupt(\"return\", result.address);\n\n                      case 10:\n                        _context8.prev = 10;\n                        _context8.t0 = _context8[\"catch\"](3);\n\n                      case 12:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }\n                }, _callee8, null, [[3, 10]]);\n              }));\n              return _getAddress.apply(this, arguments);\n            };\n\n            getAddress = function _getAddress2(_x5) {\n              return _getAddress.apply(this, arguments);\n            };\n\n            setPrimaryAccount = function _setPrimaryAccount(address) {\n              // make a copy and put in an array\n              var accounts = _toConsumableArray(addressToPath.entries());\n\n              var accountIndex = accounts.findIndex(function (_ref) {\n                var _ref2 = _slicedToArray(_ref, 1),\n                    accountAddress = _ref2[0];\n\n                return accountAddress === address;\n              }); // pull the item at the account index out of the array and place at the front\n\n              accounts.unshift(accounts.splice(accountIndex, 1)[0]); // reassign addressToPath to new ordered accounts\n\n              addressToPath = new Map(accounts);\n            };\n\n            addresses = function _addresses() {\n              return Array.from(addressToPath.keys());\n            };\n\n            enable = function _enable() {\n              enabled = true;\n              return _getAccounts();\n            };\n\n            _createTransport = function _createTransport3() {\n              _createTransport = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n                var observer;\n                return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        _context7.prev = 0;\n\n                        if (!LedgerTransport) {\n                          _context7.next = 7;\n                          break;\n                        }\n\n                        _context7.next = 4;\n                        return LedgerTransport.create();\n\n                      case 4:\n                        _context7.t0 = _context7.sent;\n                        _context7.next = 10;\n                        break;\n\n                      case 7:\n                        _context7.next = 9;\n                        return TransportU2F.create();\n\n                      case 9:\n                        _context7.t0 = _context7.sent;\n\n                      case 10:\n                        transport = _context7.t0;\n                        eth = new Eth(transport);\n                        observer = {\n                          next: function next(event) {\n                            if (event.type === 'remove') {\n                              disconnect();\n                            }\n                          },\n                          error: function error() {},\n                          complete: function complete() {}\n                        };\n                        LedgerTransport ? LedgerTransport.listen(observer) : TransportU2F.listen(observer);\n                        _context7.next = 19;\n                        break;\n\n                      case 16:\n                        _context7.prev = 16;\n                        _context7.t1 = _context7[\"catch\"](0);\n                        throw new Error('Error connecting to Ledger wallet');\n\n                      case 19:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _callee7, null, [[0, 16]]);\n              }));\n              return _createTransport.apply(this, arguments);\n            };\n\n            createTransport = function _createTransport2() {\n              return _createTransport.apply(this, arguments);\n            };\n\n            isCustomPath = function _isCustomPath() {\n              return customPath;\n            };\n\n            _setPath = function _setPath3() {\n              _setPath = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(path, custom) {\n                var address;\n                return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        if (isValidPath(path)) {\n                          _context6.next = 2;\n                          break;\n                        }\n\n                        return _context6.abrupt(\"return\", false);\n\n                      case 2:\n                        if (path !== dPath) {\n                          // clear any exsting addresses if different path\n                          addressToPath = new Map();\n                        }\n\n                        if (!custom) {\n                          _context6.next = 10;\n                          break;\n                        }\n\n                        _context6.next = 6;\n                        return getAddress(path);\n\n                      case 6:\n                        address = _context6.sent;\n                        addressToPath.set(address, path);\n                        customPath = true;\n                        return _context6.abrupt(\"return\", true);\n\n                      case 10:\n                        customPath = false;\n                        dPath = path;\n                        return _context6.abrupt(\"return\", true);\n\n                      case 13:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6);\n              }));\n              return _setPath.apply(this, arguments);\n            };\n\n            setPath = function _setPath2(_x3, _x4) {\n              return _setPath.apply(this, arguments);\n            };\n\n            disconnect = function _disconnect() {\n              transport && transport.close();\n              provider.stop();\n              resetWalletState({\n                disconnected: true,\n                walletName: 'Ledger'\n              });\n            };\n\n            _context14.next = 26;\n            return __webpack_require__.e(/*! import() */ 0).then(__webpack_require__.bind(null, /*! ./providerEngine-597c2212.js */ \"./node_modules/bnc-onboard/dist/esm/providerEngine-597c2212.js\"));\n\n          case 26:\n            _yield$import = _context14.sent;\n            createProvider = _yield$import[\"default\"];\n            _context14.next = 30;\n            return __webpack_require__.e(/*! import() */ 2).then(__webpack_require__.bind(null, /*! ./hd-wallet-642b97e3.js */ \"./node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js\"));\n\n          case 30:\n            _yield$import2 = _context14.sent;\n            generateAddresses = _yield$import2.generateAddresses;\n            isValidPath = _yield$import2.isValidPath;\n            _context14.next = 35;\n            return __webpack_require__.e(/*! import() */ 10).then(__webpack_require__.bind(null, /*! @ledgerhq/hw-transport-u2f */ \"./node_modules/@ledgerhq/hw-transport-u2f/lib-es/TransportU2F.js\"));\n\n          case 35:\n            _yield$import3 = _context14.sent;\n            TransportU2F = _yield$import3[\"default\"];\n            _context14.next = 39;\n            return __webpack_require__.e(/*! import() */ 11).then(__webpack_require__.bind(null, /*! @ledgerhq/hw-app-eth */ \"./node_modules/@ledgerhq/hw-app-eth/lib-es/Eth.js\"));\n\n          case 39:\n            _yield$import4 = _context14.sent;\n            Eth = _yield$import4[\"default\"];\n            _context14.next = 43;\n            return __webpack_require__.e(/*! import() */ 1).then(__webpack_require__.t.bind(null, /*! ethereumjs-tx */ \"./node_modules/bnc-onboard/node_modules/ethereumjs-tx/dist/index.js\", 7));\n\n          case 43:\n            EthereumTx = _context14.sent;\n            _context14.next = 46;\n            return __webpack_require__.e(/*! import() */ 3).then(__webpack_require__.t.bind(null, /*! ethereumjs-util */ \"./node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/index.js\", 7));\n\n          case 46:\n            ethUtil = _context14.sent;\n            _context14.next = 49;\n            return __webpack_require__.e(/*! import() */ 12).then(__webpack_require__.t.bind(null, /*! buffer */ \"./node_modules/node-libs-browser/node_modules/buffer/index.js\", 7));\n\n          case 49:\n            buffer = _context14.sent;\n            networkId = options.networkId, rpcUrl = options.rpcUrl, LedgerTransport = options.LedgerTransport, BigNumber = options.BigNumber, networkName = options.networkName, resetWalletState = options.resetWalletState;\n            dPath = '';\n            addressToPath = new Map();\n            enabled = false;\n            customPath = false;\n            provider = createProvider({\n              getAccounts: function getAccounts(callback) {\n                _getAccounts().then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              signTransaction: function signTransaction(transactionData, callback) {\n                _signTransaction(transactionData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              processMessage: function processMessage(messageData, callback) {\n                _signMessage(messageData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              processPersonalMessage: function processPersonalMessage(messageData, callback) {\n                _signMessage(messageData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              signMessage: function signMessage(messageData, callback) {\n                _signMessage(messageData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              signPersonalMessage: function signPersonalMessage(messageData, callback) {\n                _signMessage(messageData).then(function (res) {\n                  return callback(null, res);\n                })[\"catch\"](function (err) {\n                  return callback(err, null);\n                });\n              },\n              rpcUrl: rpcUrl\n            });\n            provider.setPath = setPath;\n            provider.dPath = dPath;\n            provider.enable = enable;\n            provider.setPrimaryAccount = setPrimaryAccount;\n            provider.getPrimaryAddress = getPrimaryAddress;\n            provider.getAccounts = _getAccounts;\n            provider.getMoreAccounts = getMoreAccounts;\n            provider.getBalance = getBalance;\n            provider.getBalances = getBalances;\n            provider.send = provider.sendAsync;\n            provider.disconnect = disconnect;\n            provider.isCustomPath = isCustomPath;\n            return _context14.abrupt(\"return\", provider);\n\n          case 69:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _ledgerProvider.apply(this, arguments);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ledger);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm5jLW9uYm9hcmQvZGlzdC9lc20vbGVkZ2VyLTcxNjU3Y2M2LmpzPzljMDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxpQ0FBaUMsMkhBQTJIOztBQUU1Siw2QkFBNkIsa0tBQWtLOztBQUUvTCx3Q0FBd0MsZ0ZBQWdGLGVBQWUsZUFBZSxnQkFBZ0Isb0JBQW9CLE1BQU0sMENBQTBDLCtCQUErQixhQUFhLHFCQUFxQixtQ0FBbUMsRUFBRSxFQUFFLGNBQWMsV0FBVyxVQUFVLEVBQUUsVUFBVSxNQUFNLGlEQUFpRCxFQUFFLFVBQVUsa0JBQWtCLEVBQUUsRUFBRSxhQUFhOztBQUV2ZSwrQkFBK0Isb0NBQW9DOztBQUVuRSxrQ0FBa0MscUhBQXFIOztBQUV2SiwrQkFBK0IsNkpBQTZKOztBQUU1TCxpREFBaUQsZ0JBQWdCLGdFQUFnRSx3REFBd0QsNkRBQTZELHNEQUFzRCxrSEFBa0g7O0FBRTlaLGlDQUFpQywrRkFBK0Y7O0FBRWhJLGtDQUFrQyx1REFBdUQ7O0FBRXpGLHNDQUFzQyx1REFBdUQsdUNBQXVDLFNBQVMsT0FBTyxrQkFBa0IsRUFBRSxhQUFhOztBQUVyTCw0RUFBNEUsTUFBTSwwQkFBMEIsd0JBQXdCLEVBQUUsZ0JBQWdCLGVBQWUsUUFBUSxFQUFFLGlCQUFpQixnQkFBZ0IsRUFBRSxPQUFPLDRDQUE0QyxFQUFFOztBQUV2USxnQ0FBZ0MscUJBQXFCLG1DQUFtQyxnREFBZ0QsZ0NBQWdDLHdCQUF3Qix3RUFBd0UsRUFBRSx1QkFBdUIsdUVBQXVFLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxHQUFHOztBQUVuWSwrSEFBK0gsa0JBQWtCO0FBQ2pKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2Y7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFZSxxRUFBTSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9ibmMtb25ib2FyZC9kaXN0L2VzbS9sZWRnZXItNzE2NTdjYzYuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxuXG52YXIgbGVkZ2VySWNvbiA9IFwiXFxuXFx0PHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA0NTAgNDUwXFxcIiB3aWR0aD1cXFwiMzdcXFwiIGhlaWdodD1cXFwiMzdcXFwiPjxzdHlsZT4uc3Qwe2ZpbGw6Y3VycmVudENvbG9yfTwvc3R5bGU+PGcgaWQ9XFxcInNxdWFyZXNfMV9cXFwiPjxwYXRoIGNsYXNzPVxcXCJzdDBcXFwiIGQ9XFxcIk01NzguMiAzOTIuN1YyNC4zaDI1LjZ2MzQ0LjFoMTc1LjN2MjQuM0g1NzguMnptMzI3LjUgNS4xYy0zOS43IDAtNzAuNC0xMi44LTkzLjQtMzcuMS0yMS43LTI0LjMtMzMuMy01OC44LTMzLjMtMTAzLjYgMC00My41IDEwLjItNzkuMyAzMi0xMDQuOSAyMS43LTI2LjkgNDkuOS0zOS43IDg3LTM5LjcgMzIgMCA1Ny42IDExLjUgNzYuOCAzMy4zIDE5LjIgMjMgMjguMSA1My43IDI4LjEgOTIuMXYyMC41SDgwNC42YzAgMzcuMSA5IDY2LjUgMjYuOSA4NS43IDE2LjYgMjAuNSA0Mi4yIDI5LjQgNzQuMiAyOS40IDE1LjMgMCAyOS40LTEuMyA0MC45LTMuOCAxMS41LTIuNiAyNi45LTYuNCA0NC44LTE0LjF2MjQuM2MtMTUuMyA2LjQtMjkuNCAxMS41LTQyLjIgMTQuMS0xNC4zIDIuNi0yOC45IDMuOS00My41IDMuOHpNODk4IDEzNS42Yy0yNi45IDAtNDcuMyA5LTY0IDI1LjYtMTUuMyAxNy45LTI1LjYgNDIuMi0yOC4xIDc1LjVoMTY4LjljMC0zMi02LjQtNTYuMy0yMC41LTc0LjItMTIuOC0xOC0zMi0yNi45LTU2LjMtMjYuOXptMjM4LTIxLjhjMTkuMiAwIDM3LjEgMy44IDUxLjIgMTAuMiAxNC4xIDcuNyAyNi45IDE5LjIgMzguNCAzNy4xaDEuM2MtMS4zLTIxLjctMS4zLTQyLjItMS4zLTYyLjdWMGgyNC4zdjM5Mi43aC0xNi42bC02LjQtNDIuMmMtMjAuNSAzMC43LTUxLjIgNDcuMy04OS42IDQ3LjNzLTY2LjUtMTEuNS04Ny0zNS44Yy0yMC41LTIzLTI5LjQtNTcuNi0yOS40LTEwMi4zIDAtNDcuMyAxMC4yLTgzLjIgMjkuNC0xMDguNyAxOS4yLTI1LjYgNDguNi0zNy4yIDg1LjctMzcuMnptMCAyMS44Yy0yOS40IDAtNTIuNCAxMC4yLTY3LjggMzItMTUuMyAyMC41LTIzIDUxLjItMjMgOTIuMSAwIDc4IDMwLjcgMTE2LjQgOTAuOCAxMTYuNCAzMC43IDAgNTMuNy05IDY3LjgtMjYuOSAxNC4xLTE3LjkgMjEuNy00Ny4zIDIxLjctODkuNnYtMy44YzAtNDIuMi03LjctNzIuOS0yMS43LTkwLjgtMTIuOC0yMC41LTM1LjgtMjkuNC02Ny44LTI5LjR6bTM3OS45LTE2LjZ2MTcuOWwtNTYuMyAzLjhjMTUuMyAxOS4yIDIzIDM5LjcgMjMgNjEuNCAwIDI2LjktOSA0Ny4zLTI2LjkgNjQtMTcuOSAxNi42LTQwLjkgMjQuMy03MC40IDI0LjMtMTIuOCAwLTIxLjcgMC0yNS42LTEuMy0xMC4yIDUuMS0xNy45IDExLjUtMjMgMTcuOS01LjEgNy43LTcuNyAxNC4xLTcuNyAyM3MzLjggMTUuMyAxMC4yIDE5LjJjNi40IDMuOCAxNy45IDYuNCAzMy4zIDYuNGg0Ny4zYzI5LjQgMCA1Mi40IDYuNCA2Ny44IDE3LjlzMjQuMyAyOS40IDI0LjMgNTMuN2MwIDI5LjQtMTEuNSA1MS4yLTM0LjUgNjYuNS0yMyAxNS4zLTU2LjMgMjMtOTkuOCAyMy0zNC41IDAtNjEuNC02LjQtODAuNi0yMC41LTE5LjItMTIuOC0yOC4xLTMyLTI4LjEtNTUgMC0xOS4yIDYuNC0zNC41IDE3LjktNDcuM3MyOC4xLTIwLjUgNDcuMy0yNS42Yy03LjctMy44LTE1LjMtOS0xOS4yLTE1LjMtNS02LjItNy43LTEzLjgtNy43LTIxLjcgMC0xNy45IDExLjUtMzQuNSAzNC41LTQ4LjYtMTUuMy02LjQtMjguMS0xNi42LTM3LjEtMzAuNy05LTE0LjEtMTIuOC0zMC43LTEyLjgtNDguNiAwLTI2LjkgOS00OS45IDI1LjYtNjYuNSAxNy45LTE2LjYgNDAuOS0yNC4zIDcwLjQtMjQuMyAxNy45IDAgMzIgMS4zIDQyLjIgNS4xaDg1Ljd2MS4zaC4yem0tMjIyLjYgMzE5LjhjMCAzNy4xIDI4LjEgNTYuMyA4NC40IDU2LjMgNzEuNiAwIDEwNy41LTIzIDEwNy41LTY5LjEgMC0xNi42LTUuMS0yOC4xLTE2LjYtMzUuOC0xMS41LTcuNy0yOS40LTExLjUtNTUtMTEuNWgtNDQuOGMtNDkuOSAxLjItNzUuNSAyMC40LTc1LjUgNjAuMXptMjEuOC0yMzUuNGMwIDIxLjcgNi40IDM3LjEgMTkuMiA0OS45IDEyLjggMTEuNSAyOS40IDE3LjkgNTEuMiAxNy45IDIzIDAgNDAuOS02LjQgNTIuNC0xNy45IDEyLjgtMTEuNSAxNy45LTI4LjEgMTcuOS00OS45IDAtMjMtNi40LTQwLjktMTkuMi01Mi40LTEyLjgtMTEuNS0yOS40LTE3LjktNTIuNC0xNy45LTIxLjcgMC0zOS43IDYuNC01MS4yIDE5LjItMTIuOCAxMS40LTE3LjkgMjkuMy0xNy45IDUxLjF6XFxcIi8+PHBhdGggY2xhc3M9XFxcInN0MFxcXCIgZD1cXFwiTTE2NDAgMzk3LjhjLTM5LjcgMC03MC40LTEyLjgtOTMuNC0zNy4xLTIxLjctMjQuMy0zMy4zLTU4LjgtMzMuMy0xMDMuNiAwLTQzLjUgMTAuMi03OS4zIDMyLTEwNC45IDIxLjctMjYuOSA0OS45LTM5LjcgODctMzkuNyAzMiAwIDU3LjYgMTEuNSA3Ni44IDMzLjMgMTkuMiAyMyAyOC4xIDUzLjcgMjguMSA5Mi4xdjIwLjVoLTE5N2MwIDM3LjEgOSA2Ni41IDI2LjkgODUuNyAxNi42IDIwLjUgNDIuMiAyOS40IDc0LjIgMjkuNCAxNS4zIDAgMjkuNC0xLjMgNDAuOS0zLjggMTEuNS0yLjYgMjYuOS02LjQgNDQuOC0xNC4xdjI0LjNjLTE1LjMgNi40LTI5LjQgMTEuNS00Mi4yIDE0LjEtMTQuMSAyLjYtMjguMiAzLjgtNDQuOCAzLjh6bS02LjQtMjYyLjJjLTI2LjkgMC00Ny4zIDktNjQgMjUuNi0xNS4zIDE3LjktMjUuNiA0Mi4yLTI4LjEgNzUuNWgxNjguOWMwLTMyLTYuNC01Ni4zLTIwLjUtNzQuMi0xMi44LTE4LTMyLTI2LjktNTYuMy0yNi45em0yNDUuNi0yMS44YzExLjUgMCAyNC4zIDEuMyAzNy4xIDMuOGwtNS4xIDI0LjNjLTExLjgtMi42LTIzLjgtMy45LTM1LjgtMy44LTIzIDAtNDIuMiAxMC4yLTU3LjYgMjkuNC0xNS4zIDIwLjUtMjMgNDQuOC0yMyA3NS41djE0OS43aC0yNS42VjExOWgyMS43bDIuNiA0OS45aDEuM2MxMS41LTIwLjUgMjMtMzQuNSAzNS44LTQyLjIgMTUuNC05IDMwLjctMTIuOSA0OC42LTEyLjl6TTMzMy45IDEyLjhoLTE4M3YyNDUuNmgyNDUuNlY3Ni43Yy4xLTM0LjUtMjguMS02My45LTYyLjYtNjMuOXptLTIzOS4yIDBINjRjLTM0LjUgMC02NCAyOC4xLTY0IDY0djMwLjdoOTQuN1YxMi44ek0wIDE2NWg5NC43djk0LjdIMFYxNjV6bTMwMS45IDI0NS42aDMwLjdjMzQuNSAwIDY0LTI4LjEgNjQtNjRWMzE2aC05NC43djk0LjZ6bS0xNTEtOTQuNmg5NC43djk0LjdoLTk0LjdWMzE2ek0wIDMxNnYzMC43YzAgMzQuNSAyOC4xIDY0IDY0IDY0aDMwLjdWMzE2SDB6XFxcIi8+PC9nPjwvc3ZnPlxcblwiO1xudmFyIExFREdFUl9MSVZFX1BBVEggPSBcIm0vNDQnLzYwJ1wiO1xudmFyIEFDQ09VTlRTX1RPX0dFVCA9IDU7XG5cbmZ1bmN0aW9uIGxlZGdlcihvcHRpb25zKSB7XG4gIHZhciBycGNVcmwgPSBvcHRpb25zLnJwY1VybCxcbiAgICAgIExlZGdlclRyYW5zcG9ydCA9IG9wdGlvbnMuTGVkZ2VyVHJhbnNwb3J0LFxuICAgICAgbmV0d29ya0lkID0gb3B0aW9ucy5uZXR3b3JrSWQsXG4gICAgICBwcmVmZXJyZWQgPSBvcHRpb25zLnByZWZlcnJlZCxcbiAgICAgIGxhYmVsID0gb3B0aW9ucy5sYWJlbCxcbiAgICAgIGljb25TcmMgPSBvcHRpb25zLmljb25TcmMsXG4gICAgICBzdmcgPSBvcHRpb25zLnN2ZztcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBsYWJlbCB8fCAnTGVkZ2VyJyxcbiAgICBzdmc6IHN2ZyB8fCBsZWRnZXJJY29uLFxuICAgIGljb25TcmM6IGljb25TcmMsXG4gICAgd2FsbGV0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3dhbGxldCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoaGVscGVycykge1xuICAgICAgICB2YXIgQmlnTnVtYmVyLCBuZXR3b3JrTmFtZSwgcmVzZXRXYWxsZXRTdGF0ZSwgcHJvdmlkZXI7XG4gICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgQmlnTnVtYmVyID0gaGVscGVycy5CaWdOdW1iZXIsIG5ldHdvcmtOYW1lID0gaGVscGVycy5uZXR3b3JrTmFtZSwgcmVzZXRXYWxsZXRTdGF0ZSA9IGhlbHBlcnMucmVzZXRXYWxsZXRTdGF0ZTtcbiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZGdlclByb3ZpZGVyKHtcbiAgICAgICAgICAgICAgICAgIHJwY1VybDogcnBjVXJsLFxuICAgICAgICAgICAgICAgICAgbmV0d29ya0lkOiBuZXR3b3JrSWQsXG4gICAgICAgICAgICAgICAgICBMZWRnZXJUcmFuc3BvcnQ6IExlZGdlclRyYW5zcG9ydCxcbiAgICAgICAgICAgICAgICAgIEJpZ051bWJlcjogQmlnTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgbmV0d29ya05hbWU6IG5ldHdvcmtOYW1lLFxuICAgICAgICAgICAgICAgICAgcmVzZXRXYWxsZXRTdGF0ZTogcmVzZXRXYWxsZXRTdGF0ZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBwcm92aWRlciA9IF9jb250ZXh0NC5zZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KFwicmV0dXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlcixcbiAgICAgICAgICAgICAgICAgIFwiaW50ZXJmYWNlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0xlZGdlcicsXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Q6IHByb3ZpZGVyLmVuYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzY29ubmVjdDogcHJvdmlkZXIuZGlzY29ubmVjdCxcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczoge1xuICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9nZXQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHByb3ZpZGVyLmdldFByaW1hcnlBZGRyZXNzKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2dldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgIH0oKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2dldDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KFwicmV0dXJuXCIsIG5ldHdvcmtJZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9nZXQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgfSgpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZ2V0MyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgPSBwcm92aWRlci5nZXRQcmltYXJ5QWRkcmVzcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KFwicmV0dXJuXCIsIGFkZHJlc3MgJiYgcHJvdmlkZXIuZ2V0QmFsYW5jZShhZGRyZXNzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9nZXQzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgfSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWU0KTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gd2FsbGV0KF94KSB7XG4gICAgICAgIHJldHVybiBfd2FsbGV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3YWxsZXQ7XG4gICAgfSgpLFxuICAgIHR5cGU6ICdoYXJkd2FyZScsXG4gICAgZGVza3RvcDogdHJ1ZSxcbiAgICBtb2JpbGU6IHRydWUsXG4gICAgb3NFeGNsdXNpb25zOiBbJ2lPUyddLFxuICAgIHByZWZlcnJlZDogcHJlZmVycmVkXG4gIH07XG59XG5cbmZ1bmN0aW9uIGxlZGdlclByb3ZpZGVyKF94Mikge1xuICByZXR1cm4gX2xlZGdlclByb3ZpZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9sZWRnZXJQcm92aWRlcigpIHtcbiAgX2xlZGdlclByb3ZpZGVyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTQob3B0aW9ucykge1xuICAgIHZhciBfeWllbGQkaW1wb3J0LCBjcmVhdGVQcm92aWRlciwgX3lpZWxkJGltcG9ydDIsIGdlbmVyYXRlQWRkcmVzc2VzLCBpc1ZhbGlkUGF0aCwgX3lpZWxkJGltcG9ydDMsIFRyYW5zcG9ydFUyRiwgX3lpZWxkJGltcG9ydDQsIEV0aCwgRXRoZXJldW1UeCwgZXRoVXRpbCwgYnVmZmVyLCBuZXR3b3JrSWQsIHJwY1VybCwgTGVkZ2VyVHJhbnNwb3J0LCBCaWdOdW1iZXIsIG5ldHdvcmtOYW1lLCByZXNldFdhbGxldFN0YXRlLCBkUGF0aCwgYWRkcmVzc1RvUGF0aCwgZW5hYmxlZCwgY3VzdG9tUGF0aCwgYWNjb3VudCwgcHJvdmlkZXIsIHRyYW5zcG9ydCwgZXRoLCBkaXNjb25uZWN0LCBzZXRQYXRoLCBfc2V0UGF0aCwgaXNDdXN0b21QYXRoLCBjcmVhdGVUcmFuc3BvcnQsIF9jcmVhdGVUcmFuc3BvcnQsIGVuYWJsZSwgYWRkcmVzc2VzLCBzZXRQcmltYXJ5QWNjb3VudCwgZ2V0QWRkcmVzcywgX2dldEFkZHJlc3MsIGdldFB1YmxpY0tleSwgX2dldFB1YmxpY0tleSwgZ2V0UHJpbWFyeUFkZHJlc3MsIGdldE1vcmVBY2NvdW50cywgX2dldE1vcmVBY2NvdW50cywgX2dldEFjY291bnRzLCBfZ2V0QWNjb3VudHMyLCBnZXRCYWxhbmNlcywgZ2V0QmFsYW5jZSwgX3NpZ25UcmFuc2FjdGlvbiwgX3NpZ25UcmFuc2FjdGlvbjIsIF9zaWduTWVzc2FnZSwgX3NpZ25NZXNzYWdlMjtcblxuICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTQkKF9jb250ZXh0MTQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNC5wcmV2ID0gX2NvbnRleHQxNC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgX3NpZ25NZXNzYWdlMiA9IGZ1bmN0aW9uIF9zaWduTWVzc2FnZTQoKSB7XG4gICAgICAgICAgICAgIF9zaWduTWVzc2FnZTIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMyhtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykge1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEzLnByZXYgPSBfY29udGV4dDEzLm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShhZGRyZXNzVG9QYXRoLnNpemUgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuYWJsZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IF90b0NvbnN1bWFibGVBcnJheShhZGRyZXNzVG9QYXRoLnZhbHVlcygpKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLmFicnVwdChcInJldHVyblwiLCBldGguc2lnblBlcnNvbmFsTWVzc2FnZShwYXRoLCBldGhVdGlsLnN0cmlwSGV4UHJlZml4KG1lc3NhZ2UuZGF0YSkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IChyZXN1bHRbJ3YnXSAtIDI3KS50b1N0cmluZygxNik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSAnMCcgKyB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiMHhcIi5jb25jYXQocmVzdWx0WydyJ10pLmNvbmNhdChyZXN1bHRbJ3MnXSkuY29uY2F0KHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxMyk7XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgcmV0dXJuIF9zaWduTWVzc2FnZTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF9zaWduTWVzc2FnZSA9IGZ1bmN0aW9uIF9zaWduTWVzc2FnZTMoX3g5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfc2lnbk1lc3NhZ2UyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfc2lnblRyYW5zYWN0aW9uMiA9IGZ1bmN0aW9uIF9zaWduVHJhbnNhY3Rpb240KCkge1xuICAgICAgICAgICAgICBfc2lnblRyYW5zYWN0aW9uMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEyKHRyYW5zYWN0aW9uRGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXRoLCB0cmFuc2FjdGlvbiwgbGVkZ2VyUmVzdWx0O1xuICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTIkKF9jb250ZXh0MTIpIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMi5wcmV2ID0gX2NvbnRleHQxMi5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IF90b0NvbnN1bWFibGVBcnJheShhZGRyZXNzVG9QYXRoLnZhbHVlcygpKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIucHJldiA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiA9IG5ldyBFdGhlcmV1bVR4LlRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uRGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFpbjogbmV0d29ya05hbWUobmV0d29ya0lkKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5yYXdbNl0gPSBidWZmZXIuQnVmZmVyLmZyb20oW25ldHdvcmtJZF0pOyAvLyB2XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLnJhd1s3XSA9IGJ1ZmZlci5CdWZmZXIuZnJvbShbXSk7IC8vIHJcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ucmF3WzhdID0gYnVmZmVyLkJ1ZmZlci5mcm9tKFtdKTsgLy8gc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV0aC5zaWduVHJhbnNhY3Rpb24ocGF0aCwgdHJhbnNhY3Rpb24uc2VyaWFsaXplKCkudG9TdHJpbmcoJ2hleCcpKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZGdlclJlc3VsdCA9IF9jb250ZXh0MTIuc2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLnYgPSBidWZmZXIuQnVmZmVyLmZyb20obGVkZ2VyUmVzdWx0LnYsICdoZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLnIgPSBidWZmZXIuQnVmZmVyLmZyb20obGVkZ2VyUmVzdWx0LnIsICdoZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLnMgPSBidWZmZXIuQnVmZmVyLmZyb20obGVkZ2VyUmVzdWx0LnMsICdoZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFicnVwdChcInJldHVyblwiLCBcIjB4XCIuY29uY2F0KHRyYW5zYWN0aW9uLnNlcmlhbGl6ZSgpLnRvU3RyaW5nKCdoZXgnKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTIucHJldiA9IDE1O1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMi50MCA9IF9jb250ZXh0MTJbXCJjYXRjaFwiXSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0MTIudDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxMiwgbnVsbCwgW1sxLCAxNV1dKTtcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICByZXR1cm4gX3NpZ25UcmFuc2FjdGlvbjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF9zaWduVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiBfc2lnblRyYW5zYWN0aW9uMyhfeDgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9zaWduVHJhbnNhY3Rpb24yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBnZXRCYWxhbmNlID0gZnVuY3Rpb24gX2dldEJhbGFuY2UoYWRkcmVzcykge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLnNlbmRBc3luYyh7XG4gICAgICAgICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ2V0aF9nZXRCYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAgIHBhcmFtczogW2FkZHJlc3MsICdsYXRlc3QnXSxcbiAgICAgICAgICAgICAgICAgIGlkOiA0MlxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlLCByZXMpIHtcbiAgICAgICAgICAgICAgICAgIGUgJiYgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlcyAmJiByZXMucmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgQmlnTnVtYmVyKHJlc3VsdCkudG9TdHJpbmcoMTApKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZ2V0QmFsYW5jZXMgPSBmdW5jdGlvbiBfZ2V0QmFsYW5jZXMoYWRkcmVzc2VzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChhZGRyZXNzZXMubWFwKGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiYWxhbmNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkge1xuICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QmFsYW5jZShhZGRyZXNzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFsYW5jZSA9IF9jb250ZXh0NS5zZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IGJhbGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU1KTtcbiAgICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0oKSk7XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF9nZXRBY2NvdW50czIgPSBmdW5jdGlvbiBfZ2V0QWNjb3VudHM0KCkge1xuICAgICAgICAgICAgICBfZ2V0QWNjb3VudHMyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTEoZ2V0TW9yZSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50QWNjb3VudHMsIHBhdGhzLCBpLCBfaTIsIF9wYXRocywgcGF0aCwgcmVzLCBhZGRyZXNzSW5mbztcblxuICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTEkKF9jb250ZXh0MTEpIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdChcInJldHVyblwiLCBbXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShhZGRyZXNzVG9QYXRoLnNpemUgPiAwICYmICFnZXRNb3JlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KFwicmV0dXJuXCIsIGFkZHJlc3NlcygpKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDc7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVHJhbnNwb3J0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZFBhdGggPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRQYXRoID0gTEVER0VSX0xJVkVfUEFUSDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoZFBhdGggPT09IExFREdFUl9MSVZFX1BBVEgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDI0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEFjY291bnRzID0gYWRkcmVzc1RvUGF0aC5zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aHMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY3VycmVudEFjY291bnRzOyBpIDwgQUNDT1VOVFNfVE9fR0VUICsgY3VycmVudEFjY291bnRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aHMucHVzaChcIlwiLmNvbmNhdChMRURHRVJfTElWRV9QQVRILCBcIi9cIikuY29uY2F0KGksIFwiJy8wLzBcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaTIgPSAwLCBfcGF0aHMgPSBwYXRocztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfaTIgPCBfcGF0aHMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAyMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBfcGF0aHNbX2kyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDE3O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV0aC5nZXRBZGRyZXNzKHBhdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0MTEuc2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NUb1BhdGguc2V0KHJlcy5hZGRyZXNzLCBwYXRoKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICAgICAgICAgICAgICBfaTIrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDEzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMzY7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWNjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAzNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEucHJldiA9IDI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMjg7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UHVibGljS2V5KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudCA9IF9jb250ZXh0MTEuc2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDM0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gMzE7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDExLnQwID0gX2NvbnRleHQxMVtcImNhdGNoXCJdKDI1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0MTEudDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc0luZm8gPSBnZW5lcmF0ZUFkZHJlc3NlcyhhY2NvdW50LCBhZGRyZXNzVG9QYXRoLnNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc0luZm8uZm9yRWFjaChmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRQYXRoID0gX3JlZjQuZFBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzID0gX3JlZjQuYWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1RvUGF0aC5zZXQoYWRkcmVzcywgZFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KFwicmV0dXJuXCIsIGFkZHJlc3NlcygpKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgX2NhbGxlZTExLCBudWxsLCBbWzI1LCAzMV1dKTtcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICByZXR1cm4gX2dldEFjY291bnRzMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgX2dldEFjY291bnRzID0gZnVuY3Rpb24gX2dldEFjY291bnRzMyhfeDYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9nZXRBY2NvdW50czIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF9nZXRNb3JlQWNjb3VudHMgPSBmdW5jdGlvbiBfZ2V0TW9yZUFjY291bnRzMygpIHtcbiAgICAgICAgICAgICAgX2dldE1vcmVBY2NvdW50cyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEwKCkge1xuICAgICAgICAgICAgICAgIHZhciBhY2NvdW50cztcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2dldEFjY291bnRzKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMgPSBfY29udGV4dDEwLnNlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoXCJyZXR1cm5cIiwgYWNjb3VudHMgJiYgZ2V0QmFsYW5jZXMoYWNjb3VudHMpKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMTApO1xuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIHJldHVybiBfZ2V0TW9yZUFjY291bnRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBnZXRNb3JlQWNjb3VudHMgPSBmdW5jdGlvbiBfZ2V0TW9yZUFjY291bnRzMigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9nZXRNb3JlQWNjb3VudHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGdldFByaW1hcnlBZGRyZXNzID0gZnVuY3Rpb24gX2dldFByaW1hcnlBZGRyZXNzKCkge1xuICAgICAgICAgICAgICByZXR1cm4gZW5hYmxlZCA/IGFkZHJlc3NlcygpWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgX2dldFB1YmxpY0tleSA9IGZ1bmN0aW9uIF9nZXRQdWJsaWNLZXkzKCkge1xuICAgICAgICAgICAgICBfZ2V0UHVibGljS2V5ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0LCBwdWJsaWNLZXksIGNoYWluQ29kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkge1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYSBkZXJpdmF0aW9uIHBhdGggaXMgbmVlZGVkIHRvIGdldCB0aGUgcHVibGljIGtleScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVHJhbnNwb3J0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDkucHJldiA9IDU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXRoLmdldEFkZHJlc3MoZFBhdGgsIGZhbHNlLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0OS5zZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVibGljS2V5ID0gcmVzdWx0LnB1YmxpY0tleSwgY2hhaW5Db2RlID0gcmVzdWx0LmNoYWluQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFpbkNvZGU6IGNoYWluQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogZFBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdChcInJldHVyblwiLCBhY2NvdW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDkucHJldiA9IDE0O1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ5LnQwID0gX2NvbnRleHQ5W1wiY2F0Y2hcIl0oNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIHdhcyBhIHByb2JsZW0gYWNjZXNzaW5nIHlvdXIgTGVkZ2VyIGFjY291bnRzLicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU5LCBudWxsLCBbWzUsIDE0XV0pO1xuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIHJldHVybiBfZ2V0UHVibGljS2V5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBnZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiBfZ2V0UHVibGljS2V5MigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9nZXRQdWJsaWNLZXkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF9nZXRBZGRyZXNzID0gZnVuY3Rpb24gX2dldEFkZHJlc3MzKCkge1xuICAgICAgICAgICAgICBfZ2V0QWRkcmVzcyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgocGF0aCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVRyYW5zcG9ydCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV0aC5nZXRBZGRyZXNzKHBhdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQ4LnNlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdChcInJldHVyblwiLCByZXN1bHQuYWRkcmVzcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC50MCA9IF9jb250ZXh0OFtcImNhdGNoXCJdKDMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU4LCBudWxsLCBbWzMsIDEwXV0pO1xuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIHJldHVybiBfZ2V0QWRkcmVzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZ2V0QWRkcmVzcyA9IGZ1bmN0aW9uIF9nZXRBZGRyZXNzMihfeDUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9nZXRBZGRyZXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzZXRQcmltYXJ5QWNjb3VudCA9IGZ1bmN0aW9uIF9zZXRQcmltYXJ5QWNjb3VudChhZGRyZXNzKSB7XG4gICAgICAgICAgICAgIC8vIG1ha2UgYSBjb3B5IGFuZCBwdXQgaW4gYW4gYXJyYXlcbiAgICAgICAgICAgICAgdmFyIGFjY291bnRzID0gX3RvQ29uc3VtYWJsZUFycmF5KGFkZHJlc3NUb1BhdGguZW50cmllcygpKTtcblxuICAgICAgICAgICAgICB2YXIgYWNjb3VudEluZGV4ID0gYWNjb3VudHMuZmluZEluZGV4KGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMSksXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRBZGRyZXNzID0gX3JlZjJbMF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjb3VudEFkZHJlc3MgPT09IGFkZHJlc3M7XG4gICAgICAgICAgICAgIH0pOyAvLyBwdWxsIHRoZSBpdGVtIGF0IHRoZSBhY2NvdW50IGluZGV4IG91dCBvZiB0aGUgYXJyYXkgYW5kIHBsYWNlIGF0IHRoZSBmcm9udFxuXG4gICAgICAgICAgICAgIGFjY291bnRzLnVuc2hpZnQoYWNjb3VudHMuc3BsaWNlKGFjY291bnRJbmRleCwgMSlbMF0pOyAvLyByZWFzc2lnbiBhZGRyZXNzVG9QYXRoIHRvIG5ldyBvcmRlcmVkIGFjY291bnRzXG5cbiAgICAgICAgICAgICAgYWRkcmVzc1RvUGF0aCA9IG5ldyBNYXAoYWNjb3VudHMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYWRkcmVzc2VzID0gZnVuY3Rpb24gX2FkZHJlc3NlcygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYWRkcmVzc1RvUGF0aC5rZXlzKCkpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZW5hYmxlID0gZnVuY3Rpb24gX2VuYWJsZSgpIHtcbiAgICAgICAgICAgICAgZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiBfZ2V0QWNjb3VudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF9jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiBfY3JlYXRlVHJhbnNwb3J0MygpIHtcbiAgICAgICAgICAgICAgX2NyZWF0ZVRyYW5zcG9ydCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyO1xuICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghTGVkZ2VyVHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMZWRnZXJUcmFuc3BvcnQuY3JlYXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcudDAgPSBfY29udGV4dDcuc2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gOTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUcmFuc3BvcnRVMkYuY3JlYXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcudDAgPSBfY29udGV4dDcuc2VudDtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQgPSBfY29udGV4dDcudDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBldGggPSBuZXcgRXRoKHRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncmVtb3ZlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgTGVkZ2VyVHJhbnNwb3J0ID8gTGVkZ2VyVHJhbnNwb3J0Lmxpc3RlbihvYnNlcnZlcikgOiBUcmFuc3BvcnRVMkYubGlzdGVuKG9ic2VydmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMTk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDE2O1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3LnQxID0gX2NvbnRleHQ3W1wiY2F0Y2hcIl0oMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGNvbm5lY3RpbmcgdG8gTGVkZ2VyIHdhbGxldCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU3LCBudWxsLCBbWzAsIDE2XV0pO1xuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlVHJhbnNwb3J0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiBfY3JlYXRlVHJhbnNwb3J0MigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVUcmFuc3BvcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlzQ3VzdG9tUGF0aCA9IGZ1bmN0aW9uIF9pc0N1c3RvbVBhdGgoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjdXN0b21QYXRoO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgX3NldFBhdGggPSBmdW5jdGlvbiBfc2V0UGF0aDMoKSB7XG4gICAgICAgICAgICAgIF9zZXRQYXRoID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNihwYXRoLCBjdXN0b20pIHtcbiAgICAgICAgICAgICAgICB2YXIgYWRkcmVzcztcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0Nikge1xuICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRQYXRoKHBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KFwicmV0dXJuXCIsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoICE9PSBkUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGVhciBhbnkgZXhzdGluZyBhZGRyZXNzZXMgaWYgZGlmZmVyZW50IHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1RvUGF0aCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXN0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRBZGRyZXNzKHBhdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyA9IF9jb250ZXh0Ni5zZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1RvUGF0aC5zZXQoYWRkcmVzcywgcGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21QYXRoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KFwicmV0dXJuXCIsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVBhdGggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRQYXRoID0gcGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KFwicmV0dXJuXCIsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU2KTtcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICByZXR1cm4gX3NldFBhdGguYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNldFBhdGggPSBmdW5jdGlvbiBfc2V0UGF0aDIoX3gzLCBfeDQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9zZXRQYXRoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkaXNjb25uZWN0ID0gZnVuY3Rpb24gX2Rpc2Nvbm5lY3QoKSB7XG4gICAgICAgICAgICAgIHRyYW5zcG9ydCAmJiB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgcHJvdmlkZXIuc3RvcCgpO1xuICAgICAgICAgICAgICByZXNldFdhbGxldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBkaXNjb25uZWN0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgd2FsbGV0TmFtZTogJ0xlZGdlcidcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfY29udGV4dDE0Lm5leHQgPSAyNjtcbiAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJy4vcHJvdmlkZXJFbmdpbmUtNTk3YzIyMTIuanMnKTtcblxuICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICBfeWllbGQkaW1wb3J0ID0gX2NvbnRleHQxNC5zZW50O1xuICAgICAgICAgICAgY3JlYXRlUHJvdmlkZXIgPSBfeWllbGQkaW1wb3J0W1wiZGVmYXVsdFwiXTtcbiAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDMwO1xuICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnLi9oZC13YWxsZXQtNjQyYjk3ZTMuanMnKTtcblxuICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICBfeWllbGQkaW1wb3J0MiA9IF9jb250ZXh0MTQuc2VudDtcbiAgICAgICAgICAgIGdlbmVyYXRlQWRkcmVzc2VzID0gX3lpZWxkJGltcG9ydDIuZ2VuZXJhdGVBZGRyZXNzZXM7XG4gICAgICAgICAgICBpc1ZhbGlkUGF0aCA9IF95aWVsZCRpbXBvcnQyLmlzVmFsaWRQYXRoO1xuICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gMzU7XG4gICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGVkZ2VyaHEvaHctdHJhbnNwb3J0LXUyZicpO1xuXG4gICAgICAgICAgY2FzZSAzNTpcbiAgICAgICAgICAgIF95aWVsZCRpbXBvcnQzID0gX2NvbnRleHQxNC5zZW50O1xuICAgICAgICAgICAgVHJhbnNwb3J0VTJGID0gX3lpZWxkJGltcG9ydDNbXCJkZWZhdWx0XCJdO1xuICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gMzk7XG4gICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGVkZ2VyaHEvaHctYXBwLWV0aCcpO1xuXG4gICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgIF95aWVsZCRpbXBvcnQ0ID0gX2NvbnRleHQxNC5zZW50O1xuICAgICAgICAgICAgRXRoID0gX3lpZWxkJGltcG9ydDRbXCJkZWZhdWx0XCJdO1xuICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gNDM7XG4gICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdldGhlcmV1bWpzLXR4Jyk7XG5cbiAgICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgICAgRXRoZXJldW1UeCA9IF9jb250ZXh0MTQuc2VudDtcbiAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDQ2O1xuICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnZXRoZXJldW1qcy11dGlsJyk7XG5cbiAgICAgICAgICBjYXNlIDQ2OlxuICAgICAgICAgICAgZXRoVXRpbCA9IF9jb250ZXh0MTQuc2VudDtcbiAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDQ5O1xuICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnYnVmZmVyJyk7XG5cbiAgICAgICAgICBjYXNlIDQ5OlxuICAgICAgICAgICAgYnVmZmVyID0gX2NvbnRleHQxNC5zZW50O1xuICAgICAgICAgICAgbmV0d29ya0lkID0gb3B0aW9ucy5uZXR3b3JrSWQsIHJwY1VybCA9IG9wdGlvbnMucnBjVXJsLCBMZWRnZXJUcmFuc3BvcnQgPSBvcHRpb25zLkxlZGdlclRyYW5zcG9ydCwgQmlnTnVtYmVyID0gb3B0aW9ucy5CaWdOdW1iZXIsIG5ldHdvcmtOYW1lID0gb3B0aW9ucy5uZXR3b3JrTmFtZSwgcmVzZXRXYWxsZXRTdGF0ZSA9IG9wdGlvbnMucmVzZXRXYWxsZXRTdGF0ZTtcbiAgICAgICAgICAgIGRQYXRoID0gJyc7XG4gICAgICAgICAgICBhZGRyZXNzVG9QYXRoID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY3VzdG9tUGF0aCA9IGZhbHNlO1xuICAgICAgICAgICAgcHJvdmlkZXIgPSBjcmVhdGVQcm92aWRlcih7XG4gICAgICAgICAgICAgIGdldEFjY291bnRzOiBmdW5jdGlvbiBnZXRBY2NvdW50cyhjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIF9nZXRBY2NvdW50cygpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlcyk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc2lnblRyYW5zYWN0aW9uOiBmdW5jdGlvbiBzaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25EYXRhLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIF9zaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25EYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXMpO1xuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByb2Nlc3NNZXNzYWdlOiBmdW5jdGlvbiBwcm9jZXNzTWVzc2FnZShtZXNzYWdlRGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBfc2lnbk1lc3NhZ2UobWVzc2FnZURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlcyk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcHJvY2Vzc1BlcnNvbmFsTWVzc2FnZTogZnVuY3Rpb24gcHJvY2Vzc1BlcnNvbmFsTWVzc2FnZShtZXNzYWdlRGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBfc2lnbk1lc3NhZ2UobWVzc2FnZURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlcyk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc2lnbk1lc3NhZ2U6IGZ1bmN0aW9uIHNpZ25NZXNzYWdlKG1lc3NhZ2VEYXRhLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIF9zaWduTWVzc2FnZShtZXNzYWdlRGF0YSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzKTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzaWduUGVyc29uYWxNZXNzYWdlOiBmdW5jdGlvbiBzaWduUGVyc29uYWxNZXNzYWdlKG1lc3NhZ2VEYXRhLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIF9zaWduTWVzc2FnZShtZXNzYWdlRGF0YSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzKTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBycGNVcmw6IHJwY1VybFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcm92aWRlci5zZXRQYXRoID0gc2V0UGF0aDtcbiAgICAgICAgICAgIHByb3ZpZGVyLmRQYXRoID0gZFBhdGg7XG4gICAgICAgICAgICBwcm92aWRlci5lbmFibGUgPSBlbmFibGU7XG4gICAgICAgICAgICBwcm92aWRlci5zZXRQcmltYXJ5QWNjb3VudCA9IHNldFByaW1hcnlBY2NvdW50O1xuICAgICAgICAgICAgcHJvdmlkZXIuZ2V0UHJpbWFyeUFkZHJlc3MgPSBnZXRQcmltYXJ5QWRkcmVzcztcbiAgICAgICAgICAgIHByb3ZpZGVyLmdldEFjY291bnRzID0gX2dldEFjY291bnRzO1xuICAgICAgICAgICAgcHJvdmlkZXIuZ2V0TW9yZUFjY291bnRzID0gZ2V0TW9yZUFjY291bnRzO1xuICAgICAgICAgICAgcHJvdmlkZXIuZ2V0QmFsYW5jZSA9IGdldEJhbGFuY2U7XG4gICAgICAgICAgICBwcm92aWRlci5nZXRCYWxhbmNlcyA9IGdldEJhbGFuY2VzO1xuICAgICAgICAgICAgcHJvdmlkZXIuc2VuZCA9IHByb3ZpZGVyLnNlbmRBc3luYztcbiAgICAgICAgICAgIHByb3ZpZGVyLmRpc2Nvbm5lY3QgPSBkaXNjb25uZWN0O1xuICAgICAgICAgICAgcHJvdmlkZXIuaXNDdXN0b21QYXRoID0gaXNDdXN0b21QYXRoO1xuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTQuYWJydXB0KFwicmV0dXJuXCIsIHByb3ZpZGVyKTtcblxuICAgICAgICAgIGNhc2UgNjk6XG4gICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZTE0KTtcbiAgfSkpO1xuICByZXR1cm4gX2xlZGdlclByb3ZpZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxlZGdlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/bnc-onboard/dist/esm/ledger-71657cc6.js\n");

/***/ })

}]);